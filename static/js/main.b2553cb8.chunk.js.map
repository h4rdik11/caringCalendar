{"version":3,"sources":["assets/icon-next-date.svg","assets/icon-left.svg","assets/icon-right.svg","App.js","reportWebVitals.js","index.js"],"names":["App","weekDayLong","moment","weekdays","useState","currentDate","Date","dateCells","state","setState","setDate","e","dateObj","firstDayOfMonth","startOf","format","lastDayOfMonth","endOf","daysInMonth","newDateCell","prevDateObj","previousMonth","subtract","lastDayOfPreviousMonth","parseInt","set","month","yearOfPrevMonth","i","date","year","isPrevious","hasAppointments","concat","momentObject","push","isCurrent","nextDateObj","nextMonth","add","firstDayOfNextMonth","yearOfNextMonth","isNext","map","isToday","isSame","weekOff","day","useEffect","className","onClick","src","CalIcon","alt","IconLeft","IconRight","toUpperCase","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2553cb8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/icon-next-date.2bf105c2.svg\";","export default __webpack_public_path__ + \"static/media/icon-left.1e134aa9.svg\";","export default __webpack_public_path__ + \"static/media/icon-right.dc671410.svg\";","import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport \"./App.css\";\nimport CalIcon from \"./assets/icon-next-date.svg\";\nimport IconRight from \"./assets/icon-left.svg\";\nimport IconLeft from \"./assets/icon-right.svg\";\n\nfunction App() {\n  const weekDayLong = moment.weekdays();\n  const [state, setState] = useState({\n    currentDate: moment(new Date()),\n    dateCells: [],\n  });\n\n  const setDate = (currentDate) => (e) => {\n    setState(() => {\n      const dateObj = moment(currentDate);\n      const firstDayOfMonth = dateObj.startOf(\"month\").format(\"d\");\n      const lastDayOfMonth = dateObj.endOf(\"month\").format(\"d\");\n      const daysInMonth = dateObj.daysInMonth();\n      let newDateCell = [];\n\n      let prevDateObj = moment(currentDate);\n      let previousMonth = prevDateObj.subtract(1, \"months\").format(\"MMM\");\n      let lastDayOfPreviousMonth = parseInt(\n        prevDateObj.set({ month: previousMonth }).endOf(\"month\").format(\"D\"),\n        10\n      );\n      let yearOfPrevMonth = prevDateObj\n        .set({ month: previousMonth })\n        .endOf(\"month\")\n        .format(\"YYYY\");\n\n      for (let i = firstDayOfMonth; i > 0; i--) {\n        let momentObject = moment().set({\n          date: lastDayOfPreviousMonth,\n          month: previousMonth,\n          year: yearOfPrevMonth,\n        });\n        newDateCell = [\n          {\n            date: momentObject,\n            isPrevious: true,\n            hasAppointments: i === 8 || i === 13 || i === 18 || i === 23,\n          },\n        ].concat(newDateCell);\n        --lastDayOfPreviousMonth;\n      }\n\n      for (let i = 1; i <= daysInMonth; i++) {\n        let momentObject = moment().set({\n          date: i,\n          month: dateObj.format(\"MMM\"),\n          year: dateObj.format(\"YYYY\"),\n        });\n        newDateCell.push({\n          date: momentObject,\n          isCurrent: true,\n          hasAppointments: i === 8 || i === 13 || i === 18 || i === 23,\n        });\n      }\n\n      if (parseInt(lastDayOfMonth, 10) < 6) {\n        let nextDateObj = moment(currentDate);\n        let nextMonth = nextDateObj.add(1, \"months\").format(\"MMM\");\n        nextDateObj.set({ month: nextMonth });\n        let firstDayOfNextMonth = 1;\n        let yearOfNextMonth = nextDateObj\n          .set({ month: nextMonth })\n          .format(\"YYYY\");\n\n        for (let i = parseInt(lastDayOfMonth, 10); i < 6; i++) {\n          let momentObject = moment().set({\n            date: firstDayOfNextMonth,\n            month: nextMonth,\n            year: yearOfNextMonth,\n          });\n          newDateCell.push({\n            date: momentObject,\n            isNext: true,\n            hasAppointments: i === 8 || i === 13 || i === 18 || i === 23,\n          });\n          ++firstDayOfNextMonth;\n        }\n      }\n\n      newDateCell = newDateCell.map((date, i) => ({\n        ...date,\n        isToday: moment(currentDate.format(\"YYYY-MM-DD\")).isSame(\n          date.date.format(\"YYYY-MM-DD\")\n        ),\n        weekOff: date.date.day() === 0 || date.date.day() === 6,\n      }));\n      \n      return { currentDate: currentDate, dateCells: newDateCell };\n    });\n  }\n\n  useEffect(() => {\n    setDate(moment(new Date()))();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"cal-nav-bar\">\n        <button className=\"today-button mdl-button mdl-js-button mdl-js-ripple-effect\" onClick={setDate(moment(new Date()))}>\n          <img src={CalIcon} alt=\"calIcon\" />\n          <span>Today</span>\n        </button>\n        <div className=\"nav-buttons\">\n          <img src={IconLeft} alt=\"iconLeft\" onClick={setDate(moment(state.currentDate).subtract(1, \"months\").set({ date: 1 }))} />\n          <span>\n            {state.currentDate.format(\"MMMM YYYY\")}\n          </span>\n          <img src={IconRight} alt=\"iconRight\"onClick={setDate(moment(state.currentDate).add(1, \"months\").set({ date: 1 }))}  />\n        </div>\n      </div>\n      <div className=\"week-grid\">\n        {weekDayLong.map((day) => (\n          <span key={day} className=\"calendar-header\">\n            {day.toUpperCase()}\n          </span>\n        ))}\n      </div>\n      <div className=\"days-grid\">\n        {state.dateCells.map((date, i) => {\n            return (\n              <div\n                key={date.date.format(\"DDMMYYYY\")}\n                className={`calendar-cell${i % 2 === 0 ? \" light\" : \" dark\"}${(date.isNext || date.isPrevious || date.weekOff) ? \" faded\" : \"\"}`}\n                onClick={setDate(date.date)}\n              >\n                <div className={`calendar-cell-inner${date.isToday ? \" border\" : \"\"}`}>\n                  <span className=\"date\">\n                    {date.date.format(\"DD\")}\n                    {date.isToday && <small>{date.date.format(\"MMMM\")}</small>}\n                  </span>\n                  {date.hasAppointments && !date.weekOff && (\n                    <span className=\"caption\">No Appointment</span>\n                  )}\n                  {date.weekOff && (\n                    <span className=\"caption\">Week Off</span>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}